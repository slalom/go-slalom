# Azure devops pipeline. Currently runs go tests
# Add steps that build, run tests, deploy, and more: https://aka.ms/yaml

variables:
  # versioning
  Major: 1
  Minor: 0
  releaseTag: $(Major).$(Minor).$(Build.BuildID)

  # go
  GO111MODULE: on
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '40806a01-9b0d-43d7-b10d-79b2091a5ec1'
  imageRepository: 'go-slalom'
  containerRegistry: 'goslalom.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  
  # Kubernetes Namespace
  k8sNamespace: 'go-slalom-dev'
  imagePullSecret: 'goslalom9a07-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'  

stages:
  - stage: PullRequest
    displayName: Pull Request stage
    # only run for feature branches
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: UnitTest
        displayName: 'Run Unit Tests'
        pool:
          vmImage: $(vmImageName)
        steps:          
        - script: |
            mkdir -p '$(GOBIN)'
            mkdir -p '$(GOPATH)/pkg'
            mkdir -p '$(modulePath)'
            shopt -s extglob
            mv !(gopath) '$(modulePath)'
            echo '##vso[task.prependpath]$(GOBIN)'
            echo '##vso[task.prependpath]$(GOROOT)/bin'
          displayName: 'Set up the Go workspace'
        - script: go test -v ./...
          workingDirectory: '$(modulePath)'
          displayName: 'Run tests'
  
  # build and push image
  - stage: Build
    # only run for master branch
    displayName: Build stage
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: BuildAndPushImage
        displayName: Build job
        pool:
          vmImage: $(vmImageName)
        steps:        
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            containerRegistry: $(dockerRegistryServiceConnection)          
            tags: $(releaseTag)

        # tag and create pre-release
        - task: GitHubRelease@0
          displayName: 'Tag Pre-Release'
          inputs:
            gitHubConnection: 'go-slalom token'
            repositoryName: '$(Build.Repository.Name)'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'manual'
            isPreRelease: true
            tag: $(releaseTag)

        - task: PublishPipelineArtifact@0
          displayName: 'Publish Artifacts'
          inputs:
            artifactName: 'manifests'
            targetPath: 'deploy/azure'

  - stage: DeployDev
    displayName: Deploy to Dev
    jobs:
    - deployment: Deploy
      displayName: Deploy to Dev
      pool:
        vmImage: $(vmImageName)
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@1
              inputs:
                artifactName: 'manifests'
                downloadPath: '$(System.ArtifactsDirectory)/manifests'

            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                secretName: $(imagePullSecret)
                namespace: $(k8sNamespace)
                dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                
            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                namespace: $(k8sNamespace)
                manifests: |
                  $(System.ArtifactsDirectory)/manifests/deployment.yml
                  $(System.ArtifactsDirectory)/manifests/service.yml
                imagePullSecrets: |
                  $(imagePullSecret)
                containers: |
                  $(containerRegistry)/$(imageRepository):$(releaseTag)            